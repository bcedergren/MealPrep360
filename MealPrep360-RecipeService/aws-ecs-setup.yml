# AWS ECS Task Definition for MealPrep360 Recipe Service
AWSTemplateFormatVersion: '2010-09-09'
Description: 'MealPrep360 Recipe Service on ECS Fargate'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the service will be deployed

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the service (use private subnets)

  ImageUri:
    Type: String
    Description: ECR image URI
    Default: 'your-account.dkr.ecr.us-east-1.amazonaws.com/mealprep360-recipe-service:latest'

Resources:
  # ECS Cluster
  MealPrep360Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: mealprep360-recipe-service
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 4 # Prefer spot instances for cost savings

  # IAM Role for ECS Task
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref AppSecrets

  # Task Role (for application permissions)
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Secrets Manager for environment variables
  AppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: mealprep360-recipe-service-secrets
      Description: Environment variables for MealPrep360 Recipe Service
      SecretString: !Sub |
        {
          "MONGODB_URI": "${MongoDbUri}",
          "REDIS_HOST": "${RedisHost}",
          "REDIS_PORT": "${RedisPort}",
          "REDIS_PASSWORD": "${RedisPassword}",
          "OPENAI_API_KEY": "${OpenAiApiKey}",
          "OPENAI_GPT_ID": "${OpenAiGptId}",
          "API_KEY": "${ApiKey}",
          "SPOONACULAR_API_KEY": "${SpoonacularApiKey}"
        }

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/mealprep360-recipe-service
      RetentionInDays: 30

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MealPrep360 Recipe Service
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: mealprep360-recipe-service
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024' # 1 vCPU
      Memory: '2048' # 2 GB
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: mealprep360-recipe-service
          Image: !Ref ImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '3000'
            - Name: RATE_LIMIT_DELAY_MS
              Value: '8000'
            - Name: MAX_RECIPE_FAILURES
              Value: '15'
          Secrets:
            - Name: MONGODB_URI
              ValueFrom: !Sub '${AppSecrets}:MONGODB_URI::'
            - Name: REDIS_HOST
              ValueFrom: !Sub '${AppSecrets}:REDIS_HOST::'
            - Name: REDIS_PORT
              ValueFrom: !Sub '${AppSecrets}:REDIS_PORT::'
            - Name: REDIS_PASSWORD
              ValueFrom: !Sub '${AppSecrets}:REDIS_PASSWORD::'
            - Name: OPENAI_API_KEY
              ValueFrom: !Sub '${AppSecrets}:OPENAI_API_KEY::'
            - Name: OPENAI_GPT_ID
              ValueFrom: !Sub '${AppSecrets}:OPENAI_GPT_ID::'
            - Name: API_KEY
              ValueFrom: !Sub '${AppSecrets}:API_KEY::'
            - Name: SPOONACULAR_API_KEY
              ValueFrom: !Sub '${AppSecrets}:SPOONACULAR_API_KEY::'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - 'curl -f http://localhost:3000/api/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: mealprep360-recipe-service-alb
      Scheme: internet-facing
      Type: application
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref SecurityGroup

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: mealprep360-recipe-service-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Load Balancer Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service
  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: mealprep360-recipe-service
      Cluster: !Ref MealPrep360Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref SubnetIds
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: mealprep360-recipe-service
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      HealthCheckGracePeriodSeconds: 60

  # Auto Scaling Target
  ScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Sub 'service/${MealPrep360Cluster}/${Service.Name}'
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # CPU-based Auto Scaling Policy
  ScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

  # Memory-based Auto Scaling Policy
  ScalingPolicyMemory:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: memory-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization
        TargetValue: 80.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNS'

  ServiceArn:
    Description: ARN of the ECS service
    Value: !Ref Service
    Export:
      Name: !Sub '${AWS::StackName}-ServiceArn'
