# Docker Compose for MealPrep360 - Production Environment
# =======================================================

version: '3.8'

services:
  # ==========================================
  # Frontend Services
  # ==========================================

  # Main Frontend Application
  frontend:
    build:
      context: ./MealPrep360
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.mealprep360.com
      - NEXT_PUBLIC_WS_URL=wss://ws.mealprep360.com
      - PORT=3000
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Admin Panel
  admin:
    build:
      context: ./MealPrep360-Admin
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.mealprep360.com
      - PORT=3008
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3008']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ==========================================
  # API Gateway
  # ==========================================

  api-gateway:
    build:
      context: ./MealPrep360-API
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - PORT=3001
      - RECIPE_SERVICE_URL=${RECIPE_SERVICE_URL}
      - MEALPLAN_SERVICE_URL=${MEALPLAN_SERVICE_URL}
      - SHOPPING_SERVICE_URL=${SHOPPING_SERVICE_URL}
      - SOCIAL_SERVICE_URL=${SOCIAL_SERVICE_URL}
      - BLOG_SERVICE_URL=${BLOG_SERVICE_URL}
      - WEBSOCKET_SERVICE_URL=${WEBSOCKET_SERVICE_URL}
      - RECIPE_SERVICE_API_KEY=${RECIPE_SERVICE_API_KEY}
      - MEALPLAN_SERVICE_API_KEY=${MEALPLAN_SERVICE_API_KEY}
      - SHOPPING_SERVICE_API_KEY=${SHOPPING_SERVICE_API_KEY}
      - SOCIAL_SERVICE_API_KEY=${SOCIAL_SERVICE_API_KEY}
      - BLOG_SERVICE_API_KEY=${BLOG_SERVICE_API_KEY}
      - WEBSOCKET_SERVICE_API_KEY=${WEBSOCKET_SERVICE_API_KEY}
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ==========================================
  # Microservices
  # ==========================================

  # Recipe Service
  recipe-service:
    build:
      context: ./MealPrep360-RecipeService
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - API_KEY=${RECIPE_SERVICE_API_KEY}
      - PORT=3002
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Meal Plan Service
  mealplan-service:
    build:
      context: ./MealPrep360-MealPlanService
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - API_KEY=${MEALPLAN_SERVICE_API_KEY}
      - PORT=3003
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Shopping List Service
  shopping-service:
    build:
      context: ./MealPrep360-ShoppingListService
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - API_KEY=${SHOPPING_SERVICE_API_KEY}
      - PORT=3004
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3004/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Social Media Service
  social-service:
    build:
      context: ./MealPrep360-SocialMediaService
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - API_KEY=${SOCIAL_SERVICE_API_KEY}
      - PORT=3005
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3005/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Blog Service
  blog-service:
    build:
      context: ./MealPrep360-BlogService
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - API_KEY=${BLOG_SERVICE_API_KEY}
      - PORT=3006
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3006/api/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # WebSocket Server
  websocket-server:
    build:
      context: ./MealPrep360-WebsocketServer
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_URL=${REDIS_URL}
      - WEBSOCKET_API_KEY=${WEBSOCKET_SERVICE_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3007
    env_file:
      - .env.production
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3007/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # ==========================================
  # Load Balancer & Reverse Proxy
  # ==========================================

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - '80:80'
      - '443:443'
    volumes:
      []
      # Provide these files before enabling
      # - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - api-gateway
      - admin
    restart: unless-stopped
    networks:
      - mealprep360-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # ==========================================
  # Monitoring & Observability
  # ==========================================

  # Prometheus (Metrics Collection)
  # prometheus service requires config files; add them then enable

  # Grafana (Metrics Visualization)
  # grafana service requires config files; add them then enable

  # ==========================================
  # Logging
  # ==========================================

  # ELK Stack for Logging
  # elasticsearch disabled for now

  # logstash disabled for now

  # kibana disabled for now

# ==========================================
# Volumes
# ==========================================
volumes: {}

# ==========================================
# Networks
# ==========================================
networks:
  mealprep360-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
