name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ==========================================
  # Build and Push Docker Images
  # ==========================================
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - name: frontend
            context: ./services/frontend
          - name: admin
            context: ./services/admin
          - name: api-gateway
            context: ./services/api-gateway
          - name: recipe-service
            context: ./services/recipe-service
          - name: meal-plan-service
            context: ./services/meal-plan-service
          - name: shopping-service
            context: ./services/shopping-service
          - name: social-service
            context: ./services/social-service
          - name: blog-service
            context: ./services/blog-service
          - name: websocket-server
            context: ./services/websocket-server

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service.name }}:${{ github.sha }}
        format: spdx-json
        output-file: sbom-${{ matrix.service.name }}.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.service.name }}
        path: sbom-${{ matrix.service.name }}.json

  # ==========================================
  # Security Scanning
  # ==========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: read
      packages: read
      security-events: write
    
    strategy:
      matrix:
        service:
          - frontend
          - admin
          - api-gateway
          - recipe-service
          - meal-plan-service
          - shopping-service
          - social-service
          - blog-service
          - websocket-server

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results-${{ matrix.service }}.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  # ==========================================
  # Multi-arch Build Test
  # ==========================================
  test-multiarch:
    name: Test Multi-arch Build
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Test frontend image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:latest node --version

    - name: Test api-gateway image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:latest
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:latest node --version

    - name: Test recipe-service image
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/recipe-service:latest
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/recipe-service:latest node --version

  # ==========================================
  # Cleanup Old Images
  # ==========================================
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build-and-push, security-scan, test-multiarch]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Delete old images
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: 'true'
