name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  # ==========================================
  # PR Validation
  # ==========================================
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Check for large files
      run: |
        # Check for files larger than 50MB
        find . -type f -size +50M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.next/*" -not -path "./dist/*" -not -path "./coverage/*" | while read file; do
          echo "Large file found: $file"
        done
        
        # Fail if any large files found
        large_files=$(find . -type f -size +50M -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.next/*" -not -path "./dist/*" -not -path "./coverage/*" | wc -l)
        if [ "$large_files" -gt 0 ]; then
          echo "Found $large_files large files (>50MB). Please use Git LFS or remove them."
          exit 1
        fi
        echo "No large files found."

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

    - name: Install dependencies
      run: |
        # Install dependencies for all services with error handling
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ]; then
            echo "Installing dependencies for ${service}..."
            cd services/${service}
            if [ -f "package.json" ]; then
              npm ci || echo "${service} dependency installation failed, continuing..."
            else
              echo "No package.json found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Service directory services/${service} not found, skipping..."
          fi
        done

    - name: Lint check
      run: |
        echo "Running lint checks..."
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ] && [ -f "services/${service}/package.json" ]; then
            echo "Linting ${service}..."
            cd services/${service}
            if grep -q '"lint"' package.json; then
              npm run lint || echo "${service} lint failed, continuing..."
            else
              echo "No lint script found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Skipping ${service} - directory or package.json not found"
          fi
        done

    - name: Type check
      run: |
        echo "Running type checks..."
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ] && [ -f "services/${service}/package.json" ]; then
            echo "Type checking ${service}..."
            cd services/${service}
            if grep -q '"type-check"' package.json; then
              npm run type-check || echo "${service} type-check failed, continuing..."
            elif [ -f "tsconfig.json" ]; then
              npx tsc --noEmit || echo "${service} TypeScript check failed, continuing..."
            else
              echo "No TypeScript config found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Skipping ${service} - directory or package.json not found"
          fi
        done

  # ==========================================
  # Unit Tests
  # ==========================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: pr-validation
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Install dependencies for all services with error handling
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ]; then
            echo "Installing dependencies for ${service}..."
            cd services/${service}
            if [ -f "package.json" ]; then
              npm ci || echo "${service} dependency installation failed, continuing..."
            else
              echo "No package.json found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Service directory services/${service} not found, skipping..."
          fi
        done

    - name: Run tests
      run: |
        echo "Running unit tests..."
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ] && [ -f "services/${service}/package.json" ]; then
            echo "Testing ${service}..."
            cd services/${service}
            if grep -q '"test"' package.json; then
              npm test -- --coverage --watchAll=false --passWithNoTests || echo "${service} tests failed, continuing..."
            else
              echo "No test script found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Skipping ${service} - directory or package.json not found"
          fi
        done
      env:
        NODE_ENV: test

  # ==========================================
  # Build Test
  # ==========================================
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [pr-validation, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        # Install dependencies for all services with error handling
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ]; then
            echo "Installing dependencies for ${service}..."
            cd services/${service}
            if [ -f "package.json" ]; then
              npm ci || echo "${service} dependency installation failed, continuing..."
            else
              echo "No package.json found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Service directory services/${service} not found, skipping..."
          fi
        done

    - name: Test builds
      run: |
        echo "Testing builds..."
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ] && [ -f "services/${service}/package.json" ]; then
            echo "Building ${service}..."
            cd services/${service}
            if grep -q '"build"' package.json; then
              npm run build || echo "${service} build failed, continuing..."
            else
              echo "No build script found for ${service}, skipping..."
            fi
            cd ../..
          else
            echo "Skipping ${service} - directory or package.json not found"
          fi
        done

  # ==========================================
  # Docker Build Test
  # ==========================================
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [pr-validation, unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker builds
      run: |
        echo "Testing Docker builds..."
        for service in frontend admin api-gateway recipe-service meal-plan-service shopping-service social-service blog-service websocket-server; do
          if [ -d "services/${service}" ]; then
            echo "Building Docker image for ${service}..."
            if [ -f "services/${service}/Dockerfile" ]; then
              docker build -t test-${service} ./services/${service} || echo "${service} Docker build failed, continuing..."
            else
              echo "No Dockerfile found for ${service}, skipping..."
            fi
          else
            echo "Service directory services/${service} not found, skipping..."
          fi
        done

  # ==========================================
  # PR Comment
  # ==========================================
  pr-comment:
    name: PR Comment
    runs-on: ubuntu-latest
    needs: [pr-validation, unit-tests, build-test, docker-build-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## 🔍 PR Validation Results')
          );
          
          const validationStatus = '${{ needs.pr-validation.result }}' === 'success' ? '✅' : '❌';
          const testsStatus = '${{ needs.unit-tests.result }}' === 'success' ? '✅' : '❌';
          const buildStatus = '${{ needs.build-test.result }}' === 'success' ? '✅' : '❌';
          const dockerStatus = '${{ needs.docker-build-test.result }}' === 'success' ? '✅' : '❌';
          
          const overallStatus = '${{ needs.pr-validation.result }}' === 'success' && 
                               '${{ needs.unit-tests.result }}' === 'success' && 
                               '${{ needs.build-test.result }}' === 'success' && 
                               '${{ needs.docker-build-test.result }}' === 'success' ? '✅ Ready to merge!' : '❌ Issues found';
          
          const commentBody = `## 🔍 PR Validation Results
          
          | Check | Status |
          |-------|--------|
          | Code Validation | ${validationStatus} |
          | Unit Tests | ${testsStatus} |
          | Build Test | ${buildStatus} |
          | Docker Build | ${dockerStatus} |
          
          **Overall Status:** ${overallStatus}
          
          ---
          
          ### 📋 Summary
          - **Validation:** ${{ needs.pr-validation.result }}
          - **Tests:** ${{ needs.unit-tests.result }}
          - **Build:** ${{ needs.build-test.result }}
          - **Docker:** ${{ needs.docker-build-test.result }}
          
          ${overallStatus === '❌ Issues found' ? '⚠️ Please review the failed checks before merging.' : '🎉 All checks passed! This PR is ready for review.'}`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }
