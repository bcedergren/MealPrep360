import { NextResponse } from 'next/server';

export const runtime = 'edge';
export const dynamic = 'force-dynamic';

const APP_CONTEXT = `MealPrep360 is an AI-powered platform that makes meal planning and preparation effortless, enjoyable, and sustainable. It helps users save time, reduce food waste, and discover new recipes that match their preferences and dietary needs.`;

async function generateTitleAndExcerpt(
	topic: string
): Promise<{ title: string; excerpt: string }> {
	const prompt = `${APP_CONTEXT}\n\nGenerate a catchy blog post title and a 1-2 sentence excerpt for the following topic. Respond in JSON with 'title' and 'excerpt' fields.\n\nTopic: ${topic}`;
	const openaiRes = await fetch('https://api.openai.com/v1/chat/completions', {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
			Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
		},
		body: JSON.stringify({
			model: 'gpt-3.5-turbo',
			messages: [
				{
					role: 'system',
					content:
						'You are a helpful assistant that generates blog post titles and excerpts.',
				},
				{ role: 'user', content: prompt },
			],
			max_tokens: 128,
			temperature: 0.7,
		}),
	});
	if (!openaiRes.ok) {
		throw new Error('Failed to generate title and excerpt');
	}
	const data = await openaiRes.json();
	const text = data.choices?.[0]?.message?.content || '';
	try {
		const json = JSON.parse(text.replace(/```json|```/g, '').trim());
		return { title: json.title, excerpt: json.excerpt };
	} catch {
		// fallback: try to parse manually
		const match = text.match(
			/"title"\s*:\s*"([^"]+)"[\s,]*"excerpt"\s*:\s*"([^"]+)"/
		);
		if (match) {
			return { title: match[1], excerpt: match[2] };
		}
		throw new Error('Could not parse title and excerpt');
	}
}

export async function POST(req: Request) {
	try {
		const {
			topic,
			title: inputTitle,
			excerpt: inputExcerpt,
		} = await req.json();
		let title = inputTitle;
		let excerpt = inputExcerpt;
		if (!title || !excerpt) {
			if (!topic) {
				return NextResponse.json(
					{ error: 'A topic is required if title or excerpt is missing.' },
					{ status: 400 }
				);
			}
			const generated = await generateTitleAndExcerpt(topic);
			title = title || generated.title;
			excerpt = excerpt || generated.excerpt;
		}
		const prompt = `${APP_CONTEXT}\n\nGenerate a complete blog post for the following title and excerpt. The post should be relevant to MealPrep360 users. Include an introduction, body paragraphs, and a conclusion.\n\nTitle: ${title}\nExcerpt: ${excerpt}`;
		const openaiRes = await fetch(
			'https://api.openai.com/v1/chat/completions',
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
				},
				body: JSON.stringify({
					model: 'gpt-3.5-turbo',
					messages: [
						{
							role: 'system',
							content:
								'You are a helpful assistant that generates complete blog posts.',
						},
						{ role: 'user', content: prompt },
					],
					max_tokens: 1000,
					temperature: 0.7,
				}),
			}
		);
		if (!openaiRes.ok) {
			const error = await openaiRes.text();
			return NextResponse.json({ error }, { status: 500 });
		}
		const data = await openaiRes.json();

		if (!data.choices || data.choices.length === 0) {
			console.warn('No content generated by OpenAI.');
			return NextResponse.json(
				{ error: 'No content generated' },
				{ status: 500 }
			);
		}
		const content = data.choices?.[0]?.message?.content || '';
		return NextResponse.json({ title, excerpt, content });
	} catch (err) {
		return NextResponse.json(
			{ error: 'Failed to generate blog post' },
			{ status: 500 }
		);
	}
}
